JAM_INCLUDE_PATH ?= jam ;

#############################
# Internal help (`bjam --help`/`b2 --help`)
#
# # Setting build variables
#
# List with `bjam env_help`.
#
#     bjam -s FFMPEG_INC_PATH=$HOME/ffmpeg/includes ...
#
# Or with a shell variable
#
#     export FFMPEG_INC_PATH=$HOME/ffmpeg/includes
#     bjam ....
#
# # Compilation
#
# (show `cxx_*` options with `bjam cxx_help`)
# (default configration with `bjam print_default`)
#
# Compile executables without tests (as user):
#
#   bjam exe libs
#
# and install (as administrator):
#
#   bjam install
#
# Binaries are located by default in `/usr/local/bin`.
#
# ## Tests
#
#   bjam tests
#   bjam tests/utils` all tests in tests/utils
#   bjam tests/utils.norec` tests selected by tests/utils/test_*.cpp
#
# Verbose tests:
#
#   export REDEMPTION_LOG_PRINT=1
#   bjam tests
#
#   REDEMPTION_LOG_PRINT=e  for error and debug only
#   REDEMPTION_LOG_PRINT=d  for debug only
#   REDEMPTION_LOG_PRINT=w  for other than info
#
#############################

include $(JAM_INCLUDE_PATH)/redemption-config.jam ;
include $(JAM_INCLUDE_PATH)/cxxflags.jam ;
include $(JAM_INCLUDE_PATH)/defines.jam ;
include $(JAM_INCLUDE_PATH)/includes.jam ;
include $(JAM_INCLUDE_PATH)/sanitizer.jam ;
include $(JAM_INCLUDE_PATH)/libs.jam ;

project redemption
    : requirements

    $(REDEMPTION_CXXFLAGS)
    $(REDEMPTION_FFMPEG_FLAGS)
    $(REDEMPTION_BOOST_STACKTRACE_FLAGS)
    $(GCOV)

    <cxxflags>-fno-rtti
    <toolset>gcc:<cxxflags>-pipe

    # <cxx-lto-default>on
    # <cxx-stack-protector-default>on # strong, all

    # <cxxflags>-fpie

   : default-build release
;

include $(JAM_INCLUDE_PATH)/testing-coverage.jam ;

include $(JAM_INCLUDE_PATH)/ocr.jam ;
include $(JAM_INCLUDE_PATH)/redemption-dependencies.jam ;


obj program_options : $(PROGRAM_OPTIONS_SRC_PATH)/program_options.cpp ;

make test_libredrec : libredrec : @test_libredrec : <variant>san:<build>no ;

actions test_libredrec
{
    # check is loadable
    $(TOOLS_PATH)/redrec rec $(>) -h > /dev/null && :> $(<)
}

include $(REDEMPTION_PUBLIC_PATH)/targets.jam ;


actions gen_targets
{
    ./tools/bjam/gen_targets.py > targets.jam
    ./tools/bjam/gen_targets.py src/main/headlessclient.cpp |
        sed 's#^obj #add_obj #;t
             /^\s*</!d
             s/^\s*</requirement_list += </
             s/$/ ;/' \
        | sort > projects/qtclient/redemption_deps.jam
}

explicit targets.jam ;
make targets.jam : : @gen_targets ;

rule bjam_help ( targets * : sources * : properties * )
{
    local ps = [ property-set.create $(properties) ] ;
    local color = [ $(ps).get <cxx-color> ] ;
    local options = ;
    if $(color) = "never"
    {
        color = --color=never ;
    }
    else
    {
        color = --color=always ;
    }
    OPTIONS on $(targets) = $(color) [ $(ps).get <action><option> ] ;
}

actions bjam_help
{
    ./tools/bjam/bjam_help.sh $(OPTIONS)
}

explicit env_help cxx_help ;
make env_help : : @bjam_help <option>project ;
make cxx_help : : @bjam_help <option>compiler ;


rule print_default ( targets * : sources * : properties * )
{
    echo "Properties:" ;
    local ps = [ property-set.create $(properties) ] ;
    for p in [ $(ps).raw ]
    {
        echo "$(p)" ;
    }
}

explicit print_default ;
make print_default : : @print_default ;


## { test_web_video_mp4
explicit test_web_video_mp4 tests/web_video/test.mp4 generate_video ;

exe generate_video
:
    $(REDEMPTION_TEST_PATH)/web_video/generate_video.cpp
    src/utils/set_exception_handler_pretty_message.o
:
    $(EXE_DEPENDENCIES_NO_SYSLOG)
    $(FFMPEG_CXXFLAGS)
    <library>libredrec
    <library>ffmpeg
    <library>png
    <library>dl
;

actions run_web_video_mp4 {
    set -e
    TMP=/tmp/web_video_mp4_test/
    VIDEO=$TMP/test.mp4
    rm -f "$VIDEO"
    mkdir -p $TMP
    "$(>)" $VIDEO
    cp "$(REDEMPTION_TEST_PATH)/web_video/test.html" "$TMP"
    cd $TMP
    python -m SimpleHTTPServer 4104 &
    xdg-open 'http://0000:4104/test.html'
    sleep 3
    pkill -P $$
}

make tests/web_video/test.mp4 : generate_video : @run_web_video_mp4 ;

alias test_web_video_mp4 : tests/web_video/test.mp4 ;
## } test_web_video_mp4


explicit
    install
    instexe
    install-bin
    install-lib
    install-share
    install-etc
    install-etc-ppocr
    install-etc-ppocr-latin
    install-etc-ppocr-latin-cyrillic
    exe
    libs
;

alias instexe : install-bin ;
alias install :
    install-bin install-lib
    install-etc
    install-etc-ppocr
    install-share
;
alias exe     : rdpproxy rdpclient rdpinichecker ;
alias libs    : libredrec ;

alias ocr_tools : display_learning extract_text ppocr_extract_text ;

alias install-etc-ppocr : install-etc-ppocr-latin install-etc-ppocr-latin-cyrillic ;

install install-bin
    : exe
    : <install-type>EXE
      #<install-dependencies>on
    : <location>$(INSTALLDIR)$(BIN_PREFIX)
    ;

install install-share
    : [ glob "$(REDEMPTION_SYS_PATH)/share/rdpproxy/[^.k]*" ]
    :
    : <location>$(INSTALLDIR)$(SHARE_PREFIX)
    ;

install install-etc
    : [ glob $(REDEMPTION_ETC_DH_GLOG) ]
    :
    : <location>$(INSTALLDIR)$(ETC_PREFIX)
    ;

install install-etc-ppocr-latin
    : [ glob $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin/* ]
    :
    : <location>$(INSTALLDIR)$(ETC_PREFIX)/ppocr.latin
    ;

install install-etc-ppocr-latin-cyrillic
    : [ glob $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin-cyrillic/* ]
    :
    : <location>$(INSTALLDIR)$(ETC_PREFIX)/ppocr.latin-cyrillic
    ;

install install-lib
    : libs
    :
    : <location>$(INSTALLDIR)$(LIB_PREFIX)
    ;


exe redrec
:
    $(REDEMPTION_SRC_PATH)/main/redrec.cpp
    libredrec
:
    $(EXE_DEPENDENCIES)
;


## ppocr resources {

exe ppocr_write_glyphs :
    $(PPOCR_SRC_PATH)/ppocr/write_glyphs.cpp
    ppocr
:
    $(EXE_DEPENDENCIES_NO_SYSLOG)
;

exe ppocr_normalize_glyphs :
    $(PPOCR_SRC_PATH)/ppocr/normalize_glyphs.cpp
    ppocr
:
    $(EXE_DEPENDENCIES_NO_SYSLOG)
;

exe ppocr_write_datas :
    $(PPOCR_SRC_PATH)/ppocr/write_datas.cpp
    ppocr
:
    $(EXE_DEPENDENCIES_NO_SYSLOG)
;


actions make_ppocr_resources {
    $(PPOCR_MODULE_PATH)/learning "$(>)"
    # latin
    cp $(PPOCR_MODULE_PATH)/resources/glyphs/normalized-glyphs-latin.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin/glyphs.txt
    cp $(PPOCR_MODULE_PATH)/resources/datas/latin.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin/datas.txt
    cp $(PPOCR_MODULE_PATH)/resources/dict_fr.trie \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin/dict.trie.txt
    cp $(PPOCR_MODULE_PATH)/resources/words_lines-latin.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin/words_lines.txt

    # latin-cyrillic
    cp $(PPOCR_MODULE_PATH)/resources/glyphs/normalized-glyphs-latin-cyrillic.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin-cyrillic/glyphs.txt
    cp $(PPOCR_MODULE_PATH)/resources/datas/latin-cyrillic.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin-cyrillic/datas.txt
    cp $(PPOCR_MODULE_PATH)/resources/words_lines-latin-cyrillic.txt \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin-cyrillic/words_lines.txt
    cp $(PPOCR_MODULE_PATH)/resources/dict_fr.trie \
       $(REDEMPTION_SYS_PATH)/etc/rdpproxy/ppocr.latin-cyrillic/dict.trie.txt
}

explicit ppocr_resources ppocr_write_glyphs ppocr_normalize_glyphs ppocr_write_datas ;

make ppocr_resources :
    ppocr_write_glyphs
    ppocr_normalize_glyphs
    ppocr_write_datas
:
    @make_ppocr_resources
;

## } ppocr resources



actions make_gettextinstall
{
    mkdir $(<) > /dev/null 2>&1
    tools/i18n/gen_msg_catalog.py -C -p tools/i18n -b $(<)
}

explicit gettextinstall ;
always gettextinstall ;
make gettextinstall : : @make_gettextinstall : <location>$(SHARE_PREFIX) ;

# Compile/recompile all message catalogs to binary format (as administrator) :
#
#   bjam gettextinstall
#