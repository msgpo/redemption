//
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
//

void Inifile::ConfigurationHolder::set_section(zstring_view section) {
    if (0) {}
    else if (section == "globals"_zv) {
        this->section_id = 1;
    }
    else if (section == "session_log"_zv) {
        this->section_id = 2;
    }
    else if (section == "client"_zv) {
        this->section_id = 3;
    }
    else if (section == "mod_rdp"_zv) {
        this->section_id = 4;
    }
    else if (section == "mod_vnc"_zv) {
        this->section_id = 5;
    }
    else if (section == "metrics"_zv) {
        this->section_id = 6;
    }
    else if (section == "file_verification"_zv) {
        this->section_id = 7;
    }
    else if (section == "file_storage"_zv) {
        this->section_id = 8;
    }
    else if (section == "icap_server_down"_zv) {
        this->section_id = 9;
    }
    else if (section == "icap_server_up"_zv) {
        this->section_id = 10;
    }
    else if (section == "mod_replay"_zv) {
        this->section_id = 11;
    }
    else if (section == "ocr"_zv) {
        this->section_id = 12;
    }
    else if (section == "video"_zv) {
        this->section_id = 13;
    }
    else if (section == "crypto"_zv) {
        this->section_id = 14;
    }
    else if (section == "websocket"_zv) {
        this->section_id = 15;
    }
    else if (section == "debug"_zv) {
        this->section_id = 16;
    }
    else if (section == "remote_program"_zv) {
        this->section_id = 17;
    }
    else if (section == "translation"_zv) {
        this->section_id = 18;
    }
    else if (section == "internal_mod"_zv) {
        this->section_id = 19;
    }
    else if (section == "theme"_zv) {
        this->section_id = 20;
    }
    else if (static_cast<cfg::debug::config>(this->variables).value) {
        LOG(LOG_WARNING, "unknown section [%s]", section);
        this->section_id = 0;
    }

    this->section_name = section.c_str();
}

void Inifile::ConfigurationHolder::set_value(zstring_view key, zstring_view value) {
    if (0) {}
    else if (this->section_id == 1) {
        if (0) {}
        else if (key == "glyph_cache"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::glyph_cache&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "port"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::port&>(this->variables).value,
                ::configs::spec_type<unsigned>{},
                value
            );
        }
        else if (key == "nomouse"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::nomouse&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "encryptionLevel"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::encryptionLevel&>(this->variables).value,
                ::configs::spec_type<Level>{},
                value
            );
        }
        else if (key == "authfile"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::authfile&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "handshake_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::handshake_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "session_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::session_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "inactivity_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::inactivity_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "keepalive_grace_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::keepalive_grace_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "authentication_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::authentication_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "close_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::close_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "trace_type"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::trace_type&>(this->variables).value,
                ::configs::spec_type<TraceType>{},
                value
            );
        }
        else if (key == "listen_address"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::listen_address&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::ip>{},
                value
            );
        }
        else if (key == "enable_transparent_mode"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_transparent_mode&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "certificate_password"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::certificate_password&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "enable_bitmap_update"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_bitmap_update&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_close_box"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_close_box&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_osd"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_osd&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_osd_display_remote_target"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_osd_display_remote_target&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_wab_integration"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_wab_integration&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_using_multiple_monitors"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::allow_using_multiple_monitors&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_scale_factor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::allow_scale_factor&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_refresh_rect"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::bogus_refresh_rect&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "large_pointer_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::large_pointer_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "unicode_keyboard_event_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::unicode_keyboard_event_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "mod_recv_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::mod_recv_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 100, 10000>>{},
                value
            );
        }
        else if (key == "spark_view_specific_glyph_width"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::spark_view_specific_glyph_width&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "experimental_enable_serializer_data_block_size_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::experimental_enable_serializer_data_block_size_limit&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "experimental_support_resize_session_during_recording"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::experimental_support_resize_session_during_recording&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "support_connection_redirection_during_recording"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::support_connection_redirection_during_recording&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "rdp_keepalive_connection_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::rdp_keepalive_connection_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "enable_ipv6"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_ipv6&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 2) {
        if (0) {}
        else if (key == "enable_session_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_log::enable_session_log&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_arcsight_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_log::enable_arcsight_log&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "keyboard_input_masking_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_log::keyboard_input_masking_level&>(this->variables).value,
                ::configs::spec_type<KeyboardInputMaskingLevel>{},
                value
            );
        }
        else if (key == "hide_non_printable_kbd_input"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_log::hide_non_printable_kbd_input&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 3) {
        if (0) {}
        else if (key == "keyboard_layout_proposals"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::keyboard_layout_proposals&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                value
            );
        }
        else if (key == "ignore_logon_password"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::ignore_logon_password&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "performance_flags_default"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::performance_flags_default&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "performance_flags_force_present"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::performance_flags_force_present&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "performance_flags_force_not_present"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::performance_flags_force_not_present&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "auto_adjust_performance_flags"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::auto_adjust_performance_flags&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "tls_fallback_legacy"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_fallback_legacy&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "tls_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "tls_min_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_min_level&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "tls_max_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_max_level&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "show_common_cipher_list"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::show_common_cipher_list&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_nla"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::enable_nla&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_neg_request"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::bogus_neg_request&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_user_id"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::bogus_user_id&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "disable_tsk_switch_shortcuts"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::disable_tsk_switch_shortcuts&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "rdp_compression"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::rdp_compression&>(this->variables).value,
                ::configs::spec_type<RdpCompression>{},
                value
            );
        }
        else if (key == "max_color_depth"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::max_color_depth&>(this->variables).value,
                ::configs::spec_type<ColorDepth>{},
                value
            );
        }
        else if (key == "persistent_disk_bitmap_cache"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::persistent_disk_bitmap_cache&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "cache_waiting_list"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::cache_waiting_list&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "persist_bitmap_cache_on_disk"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::persist_bitmap_cache_on_disk&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bitmap_compression"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::bitmap_compression&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "fast_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::fast_path&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_suppress_output"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::enable_suppress_output&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "ssl_cipher_list"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::ssl_cipher_list&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "show_target_user_in_f12_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::show_target_user_in_f12_message&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_new_pointer_update"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::enable_new_pointer_update&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_ios_glyph_support_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::bogus_ios_glyph_support_level&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "transform_glyph_to_bitmap"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::transform_glyph_to_bitmap&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_number_of_fastpath_input_event"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::bogus_number_of_fastpath_input_event&>(this->variables).value,
                ::configs::spec_type<BogusNumberOfFastpathInputEvent>{},
                value
            );
        }
        else if (key == "recv_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::recv_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 100, 10000>>{},
                value
            );
        }
        else if (key == "enable_osd_4_eyes"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::enable_osd_4_eyes&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_remotefx"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::enable_remotefx&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_pointer_xormask_padding"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::bogus_pointer_xormask_padding&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "disabled_orders"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::disabled_orders&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<unsigned>>{},
                value
            );
        }
        else if (key == "force_bitmap_cache_v2_with_am"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::force_bitmap_cache_v2_with_am&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 4) {
        if (0) {}
        else if (key == "rdp_compression"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::rdp_compression&>(this->variables).value,
                ::configs::spec_type<RdpCompression>{},
                value
            );
        }
        else if (key == "disconnect_on_logon_user_change"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::disconnect_on_logon_user_change&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "open_session_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::open_session_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "disabled_orders"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::disabled_orders&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<unsigned>>{},
                value
            );
        }
        else if (key == "enable_nla"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_nla&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_kerberos"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_kerberos&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "persistent_disk_bitmap_cache"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::persistent_disk_bitmap_cache&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "cache_waiting_list"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::cache_waiting_list&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "persist_bitmap_cache_on_disk"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::persist_bitmap_cache_on_disk&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_channels"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::allow_channels&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                value
            );
        }
        else if (key == "deny_channels"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::deny_channels&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                value
            );
        }
        else if (key == "fast_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::fast_path&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "server_redirection_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::server_redirection_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "client_address_sent"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::client_address_sent&>(this->variables).value,
                ::configs::spec_type<ClientAddressSent>{},
                value
            );
        }
        else if (key == "bogus_sc_net_size"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::bogus_sc_net_size&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "proxy_managed_drives"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::proxy_managed_drives&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                value
            );
        }
        else if (key == "ignore_auth_channel"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::ignore_auth_channel&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "auth_channel"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::auth_channel&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "checkout_channel"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::checkout_channel&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "alternate_shell"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::alternate_shell&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "shell_arguments"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::shell_arguments&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "shell_working_directory"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::shell_working_directory&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "use_client_provided_alternate_shell"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::use_client_provided_alternate_shell&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "use_client_provided_remoteapp"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::use_client_provided_remoteapp&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "use_native_remoteapp_capability"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::use_native_remoteapp_capability&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_session_probe"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_session_probe&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_use_smart_launcher"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_use_clipboard_based_launcher&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_enable_launch_mask"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_enable_launch_mask&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_on_launch_failure"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_on_launch_failure&>(this->variables).value,
                ::configs::spec_type<SessionProbeOnLaunchFailure>{},
                value
            );
        }
        else if (key == "session_probe_launch_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_launch_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>>{},
                value
            );
        }
        else if (key == "session_probe_launch_fallback_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_launch_fallback_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>>{},
                value
            );
        }
        else if (key == "session_probe_start_launch_timeout_timer_only_after_logon"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_start_launch_timeout_timer_only_after_logon&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_keepalive_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_keepalive_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 60000>>{},
                value
            );
        }
        else if (key == "session_probe_on_keepalive_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_on_keepalive_timeout&>(this->variables).value,
                ::configs::spec_type<SessionProbeOnKeepaliveTimeout>{},
                value
            );
        }
        else if (key == "session_probe_end_disconnected_session"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_end_disconnected_session&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_customize_executable_name"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_customize_executable_name&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_enable_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_enable_log&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_enable_log_rotation"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_enable_log_rotation&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_log_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_log_level&>(this->variables).value,
                ::configs::spec_type<SessionProbeLogLevel>{},
                value
            );
        }
        else if (key == "session_probe_disconnected_application_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_disconnected_application_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>>{},
                value
            );
        }
        else if (key == "session_probe_disconnected_session_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_disconnected_session_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>>{},
                value
            );
        }
        else if (key == "session_probe_idle_session_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_idle_session_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>>{},
                value
            );
        }
        else if (key == "session_probe_exe_or_file"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_exe_or_file&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "session_probe_arguments"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_arguments&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "session_probe_clipboard_based_launcher_clipboard_initialization_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_clipboard_based_launcher_clipboard_initialization_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "session_probe_clipboard_based_launcher_start_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_clipboard_based_launcher_start_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "session_probe_clipboard_based_launcher_long_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_clipboard_based_launcher_long_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "session_probe_clipboard_based_launcher_short_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_clipboard_based_launcher_short_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "session_probe_launcher_abort_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_launcher_abort_delay&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>>{},
                value
            );
        }
        else if (key == "session_probe_allow_multiple_handshake"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_allow_multiple_handshake&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_enable_crash_dump"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_enable_crash_dump&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_handle_usage_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_handle_usage_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<uint32_t, 0, 1000>>{},
                value
            );
        }
        else if (key == "session_probe_memory_usage_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_memory_usage_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<uint32_t, 0, 200000000>>{},
                value
            );
        }
        else if (key == "session_probe_end_of_session_check_delay_time"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_end_of_session_check_delay_time&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 60000>>{},
                value
            );
        }
        else if (key == "session_probe_ignore_ui_less_processes_during_end_of_session_check"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_ignore_ui_less_processes_during_end_of_session_check&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_update_disabled_features"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_update_disabled_features&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_childless_window_as_unidentified_input_field"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_childless_window_as_unidentified_input_field&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_disabled_features"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_disabled_features&>(this->variables).value,
                ::configs::spec_type<SessionProbeDisabledFeature>{},
                value
            );
        }
        else if (key == "session_probe_bestsafe_integration"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_bestsafe_integration&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_alternate_directory_environment_variable"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_alternate_directory_environment_variable&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "session_probe_public_session"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_public_session&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_on_account_manipulation"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_on_account_manipulation&>(this->variables).value,
                ::configs::spec_type<SessionProbeOnAccountManipulation>{},
                value
            );
        }
        else if (key == "session_probe_at_end_of_session_freeze_connection_and_wait"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_at_end_of_session_freeze_connection_and_wait&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_probe_enable_cleaner"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_probe_enable_cleaner&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "application_driver_exe_or_file"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::application_driver_exe_or_file&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "application_driver_script_argument"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::application_driver_script_argument&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "application_driver_chrome_uia_script"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::application_driver_chrome_uia_script&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "application_driver_ie_script"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::application_driver_ie_script&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "server_cert_store"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::server_cert_store&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "server_cert_check"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::server_cert_check&>(this->variables).value,
                ::configs::spec_type<ServerCertCheck>{},
                value
            );
        }
        else if (key == "server_access_allowed_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::server_access_allowed_message&>(this->variables).value,
                ::configs::spec_type<ServerNotification>{},
                value
            );
        }
        else if (key == "server_cert_create_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::server_cert_create_message&>(this->variables).value,
                ::configs::spec_type<ServerNotification>{},
                value
            );
        }
        else if (key == "server_cert_success_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::server_cert_success_message&>(this->variables).value,
                ::configs::spec_type<ServerNotification>{},
                value
            );
        }
        else if (key == "server_cert_failure_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::server_cert_failure_message&>(this->variables).value,
                ::configs::spec_type<ServerNotification>{},
                value
            );
        }
        else if (key == "server_cert_error_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::server_cert_error_message&>(this->variables).value,
                ::configs::spec_type<ServerNotification>{},
                value
            );
        }
        else if (key == "hide_client_name"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::hide_client_name&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "clean_up_32_bpp_cursor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::clean_up_32_bpp_cursor&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_ios_rdpdr_virtual_channel"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::bogus_ios_rdpdr_virtual_channel&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_rdpdr_data_analysis"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_rdpdr_data_analysis&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "remoteapp_bypass_legal_notice_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::remoteapp_bypass_legal_notice_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "remoteapp_bypass_legal_notice_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::remoteapp_bypass_legal_notice_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "log_only_relevant_clipboard_activities"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::log_only_relevant_clipboard_activities&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "experimental_fix_input_event_sync"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::experimental_fix_input_event_sync&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "experimental_fix_too_long_cookie"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::experimental_fix_too_long_cookie&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "split_domain"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::split_domain&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "wabam_uses_translated_remoteapp"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::wabam_uses_translated_remoteapp&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_shadowing_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_shadowing_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "use_license_store"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::use_license_store&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_remotefx"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_remotefx&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "accept_monitor_layout_change_if_capture_is_not_started"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::accept_monitor_layout_change_if_capture_is_not_started&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_restricted_admin_mode"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_restricted_admin_mode&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "force_smartcard_authentication"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::force_smartcard_authentication&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_ipv6"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_ipv6&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "auto_reconnection_on_losing_target_link"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::auto_reconnection_on_losing_target_link&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 5) {
        if (0) {}
        else if (key == "clipboard_up"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::clipboard_up&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "clipboard_down"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::clipboard_down&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "encodings"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::encodings&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<int>>{},
                value
            );
        }
        else if (key == "server_clipboard_encoding_type"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::server_clipboard_encoding_type&>(this->variables).value,
                ::configs::spec_type<ClipboardEncodingType>{},
                value
            );
        }
        else if (key == "bogus_clipboard_infinite_loop"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::bogus_clipboard_infinite_loop&>(this->variables).value,
                ::configs::spec_type<VncBogusClipboardInfiniteLoop>{},
                value
            );
        }
        else if (key == "server_is_macos"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::server_is_macos&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "server_unix_alt"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::server_unix_alt&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "support_cursor_pseudo_encoding"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::support_cursor_pseudo_encoding&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_ipv6"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::enable_ipv6&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 6) {
        if (0) {}
        else if (key == "enable_rdp_metrics"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::metrics::enable_rdp_metrics&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_vnc_metrics"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::metrics::enable_vnc_metrics&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "log_dir_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::metrics::log_dir_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                value
            );
        }
        else if (key == "log_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::metrics::log_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "log_file_turnover_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::metrics::log_file_turnover_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::hours>{},
                value
            );
        }
        else if (key == "sign_key"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::metrics::sign_key&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 7) {
        if (0) {}
        else if (key == "socket_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::socket_path&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "enable_up"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::enable_up&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_down"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::enable_down&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "clipboard_text_up"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::clipboard_text_up&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "clipboard_text_down"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::clipboard_text_down&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "block_invalid_file_up"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::block_invalid_file_up&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "block_invalid_file_down"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::block_invalid_file_down&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "log_if_accepted"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::log_if_accepted&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "max_file_size_rejected"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::max_file_size_rejected&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 8) {
        if (0) {}
        else if (key == "store_file"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_storage::store_file&>(this->variables).value,
                ::configs::spec_type<RdpStoreFile>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 9) {
        if (0) {}
        else if (key == "host"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_down::host&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "port"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_down::port&>(this->variables).value,
                ::configs::spec_type<unsigned>{},
                value
            );
        }
        else if (key == "service_name"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_down::service_name&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tls"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_down::tls&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_x_context"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_down::enable_x_context&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "filename_percent_encoding"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_down::filename_percent_encoding&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 10) {
        if (0) {}
        else if (key == "host"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_up::host&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "port"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_up::port&>(this->variables).value,
                ::configs::spec_type<unsigned>{},
                value
            );
        }
        else if (key == "service_name"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_up::service_name&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tls"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_up::tls&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_x_context"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_up::enable_x_context&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "filename_percent_encoding"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::icap_server_up::filename_percent_encoding&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 11) {
        if (0) {}
        else if (key == "on_end_of_data"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_replay::on_end_of_data&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "replay_on_loop"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_replay::replay_on_loop&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 12) {
        if (0) {}
        else if (key == "version"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::ocr::version&>(this->variables).value,
                ::configs::spec_type<OcrVersion>{},
                value
            );
        }
        else if (key == "locale"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::ocr::locale&>(this->variables).value,
                ::configs::spec_type<OcrLocale>{},
                value
            );
        }
        else if (key == "interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::ocr::interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::duration<unsigned, std::ratio<1, 100>>>{},
                value
            );
        }
        else if (key == "on_title_bar_only"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::ocr::on_title_bar_only&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "max_unrecog_char_rate"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::ocr::max_unrecog_char_rate&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<unsigned, 0, 100>>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 13) {
        if (0) {}
        else if (key == "capture_groupid"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::capture_groupid&>(this->variables).value,
                ::configs::spec_type<unsigned>{},
                value
            );
        }
        else if (key == "capture_flags"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::capture_flags&>(this->variables).value,
                ::configs::spec_type<CaptureFlags>{},
                value
            );
        }
        else if (key == "png_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::png_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::duration<unsigned, std::ratio<1, 10>>>{},
                value
            );
        }
        else if (key == "frame_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::frame_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::duration<unsigned, std::ratio<1, 100>>>{},
                value
            );
        }
        else if (key == "break_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::break_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "png_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::png_limit&>(this->variables).value,
                ::configs::spec_type<unsigned>{},
                value
            );
        }
        else if (key == "replay_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::replay_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                value
            );
        }
        else if (key == "hash_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::hash_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                value
            );
        }
        else if (key == "record_tmp_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::record_tmp_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                value
            );
        }
        else if (key == "record_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::record_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                value
            );
        }
        else if (key == "disable_keyboard_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::disable_keyboard_log&>(this->variables).value,
                ::configs::spec_type<KeyboardLogFlags>{},
                value
            );
        }
        else if (key == "disable_clipboard_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::disable_clipboard_log&>(this->variables).value,
                ::configs::spec_type<ClipboardLogFlags>{},
                value
            );
        }
        else if (key == "disable_file_system_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::disable_file_system_log&>(this->variables).value,
                ::configs::spec_type<FileSystemLogFlags>{},
                value
            );
        }
        else if (key == "rt_display"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::rt_display&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "wrm_color_depth_selection_strategy"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::wrm_color_depth_selection_strategy&>(this->variables).value,
                ::configs::spec_type<ColorDepthSelectionStrategy>{},
                value
            );
        }
        else if (key == "wrm_compression_algorithm"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::wrm_compression_algorithm&>(this->variables).value,
                ::configs::spec_type<WrmCompressionAlgorithm>{},
                value
            );
        }
        else if (key == "bogus_vlc_frame_rate"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::bogus_vlc_frame_rate&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "codec_id"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::codec_id&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "framerate"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::framerate&>(this->variables).value,
                ::configs::spec_type<unsigned>{},
                value
            );
        }
        else if (key == "ffmpeg_options"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::ffmpeg_options&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "notimestamp"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::notimestamp&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "smart_video_cropping"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::smart_video_cropping&>(this->variables).value,
                ::configs::spec_type<SmartVideoCropping>{},
                value
            );
        }
        else if (key == "play_video_with_corrupted_bitmap"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::play_video_with_corrupted_bitmap&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_rt_without_recording"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::allow_rt_without_recording&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "file_permissions"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::file_permissions&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::file_permission>{},
                value
            );
        }
        else if (key == "rt_basename_only_sid"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::video::rt_basename_only_sid&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 14) {
        if (0) {}
        else if (key == "encryption_key"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::crypto::key0&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_binary>{},
                value
            );
        }
        else if (key == "sign_key"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::crypto::key1&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_binary>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 15) {
        if (0) {}
        else if (key == "enable_websocket"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::websocket::enable_websocket&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "use_tls"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::websocket::use_tls&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "listen_address"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::websocket::listen_address&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 16) {
        if (0) {}
        else if (key == "fake_target_ip"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::fake_target_ip&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "primary_orders"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::primary_orders&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "secondary_orders"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::secondary_orders&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "bitmap_update"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::bitmap_update&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "capture"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::capture&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "auth"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::auth&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "session"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::session&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "front"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::front&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "mod_rdp"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::mod_rdp&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "mod_vnc"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::mod_vnc&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "mod_internal"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::mod_internal&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "password"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::password&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "compression"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::compression&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "cache"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::cache&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "pass_dialog_box"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::pass_dialog_box&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "ocr"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::ocr&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "ffmpeg"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::ffmpeg&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "config"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::config&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "mod_rdp_use_failure_simulation_socket_transport"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::mod_rdp_use_failure_simulation_socket_transport&>(this->variables).value,
                ::configs::spec_type<ModRdpUseFailureSimulationSocketTransport>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 17) {
        if (0) {}
        else if (key == "allow_resize_hosted_desktop"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::remote_program::allow_resize_hosted_desktop&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 18) {
        if (0) {}
        else if (key == "language"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::translation::language&>(this->variables).value,
                ::configs::spec_type<Language>{},
                value
            );
        }
        else if (key == "login_language"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::translation::login_language&>(this->variables).value,
                ::configs::spec_type<LoginLanguage>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 19) {
        if (0) {}
        else if (key == "enable_target_field"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::internal_mod::enable_target_field&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 20) {
        if (0) {}
        else if (key == "enable_theme"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::enable_theme&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::bgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::fgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "separator_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::separator_color&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "focus_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::focus_color&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "error_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::error_color&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "logo"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::logo&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "edit_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::edit_bgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "edit_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::edit_fgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "edit_focus_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::edit_focus_color&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tooltip_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::tooltip_bgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tooltip_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::tooltip_fgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tooltip_border_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::tooltip_border_color&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "selector_line1_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_line1_bgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "selector_line1_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_line1_fgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "selector_line2_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_line2_bgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "selector_line2_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_line2_fgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "selector_selected_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_selected_bgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "selector_selected_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_selected_fgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "selector_focus_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_focus_bgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "selector_focus_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_focus_fgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "selector_label_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_label_bgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "selector_label_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_label_fgcolor&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (static_cast<cfg::debug::config>(this->variables).value) {
        LOG(LOG_WARNING, "unknown section [%s]", this->section_name);
    }
}
